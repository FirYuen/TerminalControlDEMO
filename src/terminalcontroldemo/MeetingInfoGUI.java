/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package terminalcontroldemo;

import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import terminalcontroldemo.MeetingInfo;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.event.WindowAdapter;
import java.util.*;
import java.io.*;
import com.google.gson.*;
import terminalcontroldemo.HttpUtils;
import javax.swing.Timer;
import java.awt.event.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import terminalcontroldemo.ExcelWrite;
import java.text.SimpleDateFormat;

/**
 *
 * @author FIR
 */
public class MeetingInfoGUI extends javax.swing.JFrame {

    /**
     * Creates new form MeetingInfoGUI
     */
    public MeetingInfoGUI() {
        initComponents();
        setLocationRelativeTo(null);
        setDefaultCloseOperation(MeetingInfoGUI.DISPOSE_ON_CLOSE);

        addWindowListener(new MyWindowListener());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        btnwriteToFile = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        spinner = new javax.swing.JSpinner();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableAud = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableVid = new javax.swing.JTable();
        btnwriteToTempFile = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        MTIP = new javax.swing.JFormattedTextField();
        jLabel10 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("会议信息");
        setBackground(new java.awt.Color(255, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setPreferredSize(new java.awt.Dimension(600, 300));

        jButton2.setText("停止获取");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        btnwriteToFile.setText("追加写入到固定文件");
        btnwriteToFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnwriteToFileActionPerformed(evt);
            }
        });

        jLabel1.setText("刷新间隔");

        spinner.setModel(new javax.swing.SpinnerNumberModel(3, 1, 20, 1));
        spinner.setEditor(new javax.swing.JSpinner.NumberEditor(spinner, ""));

        tableAud.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null}
            },
            new String [] {
                "发送", "接收"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableAud.setColumnSelectionAllowed(true);
        tableAud.setRowHeight(24);
        tableAud.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tableAud);
        tableAud.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        if (tableAud.getColumnModel().getColumnCount() > 0) {
            tableAud.getColumnModel().getColumn(0).setResizable(false);
            tableAud.getColumnModel().getColumn(1).setResizable(false);
        }

        jLabel2.setText("音频协议");

        jLabel3.setText("音频码率");

        tableVid.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "视频协议", "分辨率", "视频码率", "视频帧率"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableVid.setColumnSelectionAllowed(true);
        tableVid.setRowHeight(24);
        tableVid.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tableVid);
        tableVid.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        if (tableVid.getColumnModel().getColumnCount() > 0) {
            tableVid.getColumnModel().getColumn(0).setResizable(false);
            tableVid.getColumnModel().getColumn(1).setResizable(false);
            tableVid.getColumnModel().getColumn(2).setResizable(false);
            tableVid.getColumnModel().getColumn(3).setResizable(false);
        }

        btnwriteToTempFile.setText("当前值写到桌面临时文件");
        btnwriteToTempFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnwriteToTempFileActionPerformed(evt);
            }
        });

        jLabel4.setText("发送");

        jLabel5.setText("发送");

        jLabel6.setText("接收");

        jLabel7.setText("接收");

        jLabel8.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        jLabel8.setText("主视频");

        jLabel9.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        jLabel9.setText("辅视频");

        MTIP.setText("172.16.177.240");
        MTIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MTIPActionPerformed(evt);
            }
        });

        jLabel10.setText("IP");

        jButton1.setText("开始获取");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel11.setText("务必确认IP正确,否则造成DEMO卡死");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel7))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel6))))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(MTIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel11))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnwriteToTempFile)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnwriteToFile))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel9))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MTIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnwriteToFile)
                    .addComponent(jLabel1)
                    .addComponent(spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2)
                    .addComponent(btnwriteToTempFile)
                    .addComponent(jButton1))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
javax.swing.filechooser.FileSystemView fsv = javax.swing.filechooser.FileSystemView
            .getFileSystemView();
    String mainAudEncFormat = "";
    String mainAudDecFormat = "";
    String mainAudEncBitrate = "";
    String mainAudDecBitrate = "";

    String mainVidEncFormat = "";
    String mainVidDecFormat = "";
    String assVidEncFormat = "";
    String assVidDecFormat = "";

    String mainVidEncPAL = "";
    String mainVidDecPAL = "";
    String assVidEncPAL = "";
    String assVidDecPAL = "";

    String mainVidEncBitrate = "";
    String mainVidDecBitrate = "";
    String assVidEncBitrate = "";
    String assVidDecBitrate = "";

    String mainVidEncFrameRate = "";
    String mainVidDecFrameRate = "";
    String assVidEncFrameRate = "";
    String assVidDecFrameRate = "";

    ActionListener getInfo = new ActionListener() {
        public void actionPerformed(ActionEvent arg0) {

            Gson gson = new Gson();
            String meetingInfo = HttpUtils.httpGet("http://" + MTIP.getText() + "/mtapi/callinfo/callstatisticsinforeq?{\"head\":{\"sessionid\":\"undefined\",\"userid\":\"\",\"freeloginuser\":true,\"seqid\":null},\"body\":{\"eventid\":\"EV_GET_CALLSTATISTICSINFO_REQ\"}}");
            //JsonObject jsonData = new JsonParser().parse(meetingInfo).getAsJsonObject();
            JsonObject body = new JsonParser().parse(meetingInfo).getAsJsonObject().get("body").getAsJsonObject();
            System.out.println(body);
            JsonObject mainAudDec = body.get("atMainAudDecStatic").getAsJsonArray().get(0).getAsJsonObject();
            JsonObject mainAudEnc = body.get("atMainAudEncStatic").getAsJsonArray().get(0).getAsJsonObject();
            mainAudEncFormat = getKey(Sky300ini.AudPrefer, mainAudEnc.get("emAudEncType").getAsString());
            mainAudDecFormat = getKey(Sky300ini.AudPrefer, mainAudDec.get("emAudDecType").getAsString());
            mainAudEncBitrate = mainAudEnc.get("dwEncRate").getAsString();
            mainAudDecBitrate = mainAudDec.get("dwDecRate").getAsString();

            JsonObject assVidDec = body.get("atAssVidDecStatic").getAsJsonArray().get(0).getAsJsonObject();
            JsonObject assVidEnc = body.get("atAssVidEncStatic").getAsJsonArray().get(0).getAsJsonObject();
            JsonObject mainVidDec = body.get("atMainVidDecStatic").getAsJsonArray().get(0).getAsJsonObject();
            JsonObject mainVidEnc = body.get("atMainVidEncStatic").getAsJsonArray().get(0).getAsJsonObject();

            mainVidEncFormat = getKey(Sky300ini.VidPrefer, mainVidEnc.get("emVidEncType").getAsString());
            mainVidDecFormat = getKey(Sky300ini.VidPrefer, mainVidDec.get("emVidDecType").getAsString());
            assVidEncFormat = getKey(Sky300ini.VidPrefer, assVidEnc.get("emVidEncType").getAsString());
            assVidDecFormat = getKey(Sky300ini.VidPrefer, assVidDec.get("emVidDecType").getAsString());

            mainVidEncPAL = mainVidEnc.get("dwVidWidth").getAsString() + "*" + mainVidEnc.get("dwVidHeight").getAsString();
            mainVidDecPAL = mainVidDec.get("dwVidWidth").getAsString() + "*" + mainVidDec.get("dwVidHeight").getAsString();
            assVidEncPAL = assVidEnc.get("dwVidWidth").getAsString() + "*" + assVidEnc.get("dwVidHeight").getAsString();
            assVidDecPAL = assVidDec.get("dwVidWidth").getAsString() + "*" + assVidDec.get("dwVidHeight").getAsString();

            mainVidEncBitrate = mainVidEnc.get("dwEncBitrate").getAsString();
            mainVidDecBitrate = mainVidDec.get("dwDecBitrate").getAsString();
            assVidEncBitrate = assVidEnc.get("dwEncBitrate").getAsString();
            assVidDecBitrate = assVidDec.get("dwDecBitrate").getAsString();

            mainVidEncFrameRate = mainVidEnc.get("dwFrameRate").getAsString();
            mainVidDecFrameRate = mainVidDec.get("dwFrameRate").getAsString();
            assVidEncFrameRate = assVidEnc.get("dwFrameRate").getAsString();
            assVidDecFrameRate = assVidDec.get("dwFrameRate").getAsString();
            Object[][] VidData = new Object[][]{
                {mainVidEncFormat, mainVidEncPAL, mainVidEncBitrate, mainVidEncFrameRate},
                {mainVidDecFormat, mainVidDecPAL, mainVidDecBitrate, mainVidDecFrameRate},
                {assVidEncFormat, assVidEncPAL, assVidEncBitrate, assVidEncFrameRate},
                {assVidDecFormat, assVidDecPAL, assVidDecBitrate, assVidDecFrameRate}
            };
            String[] VidHeader = new String[]{
                "视频协议", "分辨率", "视频码率", "视频帧率"
            };
            Object[][] AudData = new Object[][]{
                {mainAudEncFormat, mainAudDecFormat,},
                {mainAudEncBitrate, mainAudDecBitrate}

            };
            String[] AudHeader = new String[]{
                "发送", "接受"
            };
            DefaultTableModel Vid = new DefaultTableModel(VidData, VidHeader);
            DefaultTableModel Aud = new DefaultTableModel(AudData, AudHeader);

            tableAud.setModel(Aud);
            jScrollPane2.validate();
            tableVid.setModel(Vid);
            jScrollPane1.validate();

        }
    };
    Timer timer = new Timer(3000, getInfo);
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        timer.stop();
        System.out.println("stop");
    }//GEN-LAST:event_jButton2ActionPerformed

    private void MTIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MTIPActionPerformed

    }//GEN-LAST:event_MTIPActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        timer.setDelay((int) spinner.getValue() * 1000);
        timer.start();
    }//GEN-LAST:event_jButton1ActionPerformed
    String title[] = {"发送主视频协议", "发送主视频制式", "发送帧率", "发送码率", "主视频接受协议", "主视频接受制式", "主视频接受帧率", "主视频接受码率", "发送辅视频协议", "发送辅视频制式", "发送帧率", "发送码率", "辅视频接受协议", "辅视频接受制式", "辅视频接受帧率", "辅视频接受码率", "音频发送协议", "音频发送码率", "音频接受协议", "音频接受码率"};
    private void btnwriteToTempFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnwriteToTempFileActionPerformed

        Date time = new Date();
        SimpleDateFormat sdf = new SimpleDateFormat("MM-dd-HH-mm-ss");

        fsv.getHomeDirectory();
        List<Map> list = new ArrayList<Map>();
        Map<String, String> map = new HashMap<String, String>();
        map.put("发送主视频协议", mainVidEncFormat);
        map.put("发送主视频制式", mainVidEncPAL);
        map.put("发送帧率", mainVidEncFrameRate);
        map.put("发送码率", mainVidEncBitrate);
        map.put("主视频接受协议", mainVidDecFormat);
        map.put("主视频接受制式", mainVidDecPAL);
        map.put("主视频接受帧率", mainVidDecFrameRate);
        map.put("主视频接受码率", mainVidDecBitrate);
        map.put("发送辅视频协议", assVidEncFormat);
        map.put("发送辅视频制式", assVidEncPAL);
        map.put("发送帧率", assVidEncFrameRate);
        map.put("发送码率", assVidEncBitrate);
        map.put("辅视频接受协议", assVidDecFormat);
        map.put("辅视频接受制式", assVidDecPAL);
        map.put("辅视频接受帧率", assVidDecFrameRate);
        map.put("辅视频接受码率", assVidDecBitrate);
        map.put("音频发送协议", mainAudEncFormat);
        map.put("音频发送码率", mainAudEncBitrate);
        map.put("音频接受协议", mainAudDecFormat);
        map.put("音频接受码率", mainAudDecBitrate);
        list.add(map);

        try {

            ExcelWrite.createExcel(fsv.getHomeDirectory() + "/" + sdf.format(time) + ".xls", "sheet1", title);
            ExcelWrite.writeToExcel(fsv.getHomeDirectory() + "/" + sdf.format(time) + ".xls", "sheet1", list);
        } catch (Exception ex) {
            Logger.getLogger(MeetingInfoGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnwriteToTempFileActionPerformed

    private void btnwriteToFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnwriteToFileActionPerformed

        fsv.getHomeDirectory();
        List<Map> list = new ArrayList<Map>();
        Map<String, String> map = new HashMap<String, String>();
        map.put("发送主视频协议", mainVidEncFormat);
        map.put("发送主视频制式", mainVidEncPAL);
        map.put("发送帧率", mainVidEncFrameRate);
        map.put("发送码率", mainVidEncBitrate);
        map.put("主视频接受协议", mainVidDecFormat);
        map.put("主视频接受制式", mainVidDecPAL);
        map.put("主视频接受帧率", mainVidDecFrameRate);
        map.put("主视频接受码率", mainVidDecBitrate);
        map.put("发送辅视频协议", assVidEncFormat);
        map.put("发送辅视频制式", assVidEncPAL);
        map.put("发送帧率", assVidEncFrameRate);
        map.put("发送码率", assVidEncBitrate);
        map.put("辅视频接受协议", assVidDecFormat);
        map.put("辅视频接受制式", assVidDecPAL);
        map.put("辅视频接受帧率", assVidDecFrameRate);
        map.put("辅视频接受码率", assVidDecBitrate);
        map.put("音频发送协议", mainAudEncFormat);
        map.put("音频发送码率", mainAudEncBitrate);
        map.put("音频接受协议", mainAudDecFormat);
        map.put("音频接受码率", mainAudDecBitrate);
        list.add(map);
        if (ExcelWrite.fileExist(fsv.getHomeDirectory() + "/会议状态.xls")) {
            try {
                ExcelWrite.writeToExcel(fsv.getHomeDirectory() + "/会议状态.xls", "sheet1", list);
            } catch (Exception ex) {
                Logger.getLogger(MeetingInfoGUI.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            try {
                ExcelWrite.createExcel(fsv.getHomeDirectory() + "/会议状态.xls", "sheet1", title);
                ExcelWrite.writeToExcel(fsv.getHomeDirectory() + "/会议状态.xls", "sheet1", list);
            } catch (Exception ex) {
                Logger.getLogger(MeetingInfoGUI.class.getName()).log(Level.SEVERE, null, ex);
            }

        }


    }//GEN-LAST:event_btnwriteToFileActionPerformed

    /**
     * @param args the command line arguments
     */
    class MyWindowListener extends WindowAdapter {

        public void windowClosing(WindowEvent e) {
            timer.stop();
        }
    }

    public void close() {
        System.out.println("hellloooo");
        this.dispose();
        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }

    public static String getKey(Map map, Object value) {
        String keys = "";
        Iterator it = map.entrySet().iterator();
        while (it.hasNext()) {
            Map.Entry entry = (Map.Entry) it.next();
            Object obj = entry.getValue();
            if (obj != null && obj.equals(value)) {
                keys = (String) entry.getKey();
            }

        }
        return keys;
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MeetingInfoGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MeetingInfoGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MeetingInfoGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MeetingInfoGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MeetingInfoGUI().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFormattedTextField MTIP;
    private javax.swing.JButton btnwriteToFile;
    private javax.swing.JButton btnwriteToTempFile;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner spinner;
    private javax.swing.JTable tableAud;
    private javax.swing.JTable tableVid;
    // End of variables declaration//GEN-END:variables
}
